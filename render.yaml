services:
  - type: web
    name: vegetable-inventory
    env: python
    buildCommand: |
      pip install --upgrade pip
      pip install -r requirements.txt
      # Ensure fix_deployment.py is executable (though typically not needed for python scripts)
      # chmod +x fix_deployment.py 
      python fix_deployment.py # Run the script to fix wsgi.py
      mkdir -p templates static
      cp -r templates/* templates/ || true
      cp -r static/* static/ || true
      export FLASK_APP=wsgi.py
      export FLASK_ENV=production
      export PYTHONPATH=$PYTHONPATH:$(pwd)
    startCommand: python -m gunicorn wsgi:app --workers 2 --threads 4 --timeout 120 --keep-alive 5 --max-requests 1000 --max-requests-jitter 50 --worker-class eventlet
    envVars:
      - key: PYTHON_VERSION
        value: 3.9.0
      - key: SECRET_KEY
        generateValue: true
      - key: DATABASE_URL
        fromDatabase:
          name: vegetable-inventory-db
          property: connectionString
      - key: FLASK_ENV
        value: production
      - key: FLASK_APP
        value: wsgi.py
      - key: FLASK_DEBUG
        value: "0"
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: LOG_LEVEL
        value: "DEBUG"
      - key: GUNICORN_WORKER_CLASS
        value: "eventlet"
      - key: GUNICORN_WORKERS
        value: "2"
      - key: GUNICORN_THREADS
        value: "4"
      - key: GUNICORN_TIMEOUT
        value: "120"
      - key: GUNICORN_KEEPALIVE
        value: "5"
      - key: SQLALCHEMY_POOL_SIZE
        value: "10"
      - key: SQLALCHEMY_MAX_OVERFLOW
        value: "20"
      - key: SQLALCHEMY_POOL_TIMEOUT
        value: "30"
      - key: SQLALCHEMY_POOL_RECYCLE
        value: "1800"

databases:
  - name: vegetable-inventory-db
    databaseName: vegetable_inventory
    user: vegetable_inventory_user 